#pragma once

#include <string>
#include <unordered_map>

// Also contains macros

#define u64 unsigned long long

enum {
    a8, b8, c8, d8, e8, f8, g8, h8,
    a7, b7, c7, d7, e7, f7, g7, h7,
    a6, b6, c6, d6, e6, f6, g6, h6,
    a5, b5, c5, d5, e5, f5, g5, h5,
    a4, b4, c4, d4, e4, f4, g4, h4,
    a3, b3, c3, d3, e3, f3, g3, h3,
    a2, b2, c2, d2, e2, f2, g2, h2,
    a1, b1, c1, d1, e1, f1, g1, h1, noSquare
};

std::string squareToCoord[65] = {
    "a8", "b8", "c8", "d8", "e8", "f8", "g8", "h8",
    "a7", "b7", "c7", "d7", "e7", "f7", "g7", "h7",
    "a6", "b6", "c6", "d6", "e6", "f6", "g6", "h6",
    "a5", "b5", "c5", "d5", "e5", "f5", "g5", "h5",
    "a4", "b4", "c4", "d4", "e4", "f4", "g4", "h4",
    "a3", "b3", "c3", "d3", "e3", "f3", "g3", "h3",
    "a2", "b2", "c2", "d2", "e2", "f2", "g2", "h2",
    "a1", "b1", "c1", "d1", "e1", "f1", "g1", "h1", "noSquare"
};

// Game variables

// pieces
enum {P,B,N,Q,R,K,p,b,n,q,r,k,noPiece};
std::unordered_map<int, char> char_pieces = {
    {'P', P},
    {'N', N},
    {'B', B},
    {'Q', Q},
    {'R', R},
    {'K', K},
    {'p', p},
    {'n', n},
    {'q', q},
    {'r', r},
    {'k', k},
    {'b', b}
};
std::string asciiPieces = "PBNQRKpbnqrk";


// colours
enum {black, white, both};

// castling rights
enum {wk = 1, wq = 2, bk = 4, bq = 8};

int enPassant; // Should be noSquare as default
int side; // black or white
int castlingRights;


u64 bitboards[12];  // for all pieces
u64 occupancy[3];   // white, black, both

// attack.cpp

// leaper pieces
u64 pawnAttacks[2][64]; // not the same for black and white
u64 knightAttacks[64];
u64 kingAttacks[64];

// slider pieces
u64 rookAttacks[64] = {
    72340172838076926ULL,
    144680345676153597ULL,
    289360691352306939ULL,
    578721382704613623ULL,
    1157442765409226991ULL,
    2314885530818453727ULL,
    4629771061636907199ULL,
    9259542123273814143ULL,
    72340172838141441ULL,
    144680345676217602ULL,
    289360691352369924ULL,
    578721382704674568ULL,
    1157442765409283856ULL,
    2314885530818502432ULL,
    4629771061636939584ULL,
    9259542123273813888ULL,
    72340172854657281ULL,
    144680345692602882ULL,
    289360691368494084ULL,
    578721382720276488ULL,
    1157442765423841296ULL,
    2314885530830970912ULL,
    4629771061645230144ULL,
    9259542123273748608ULL,
    72340177082712321ULL,
    144680349887234562ULL,
    289360695496279044ULL,
    578721386714368008ULL,
    1157442769150545936ULL,
    2314885534022901792ULL,
    4629771063767613504ULL,
    9259542123257036928ULL,
    72341259464802561ULL,
    144681423712944642ULL,
    289361752209228804ULL,
    578722409201797128ULL,
    1157443723186933776ULL,
    2314886351157207072ULL,
    4629771607097753664ULL,
    9259542118978846848ULL,
    72618349279904001ULL,
    144956323094725122ULL,
    289632270724367364ULL,
    578984165983651848ULL,
    1157687956502220816ULL,
    2315095537539358752ULL,
    4629910699613634624ULL,
    9259541023762186368ULL,
    143553341945872641ULL,
    215330564830528002ULL,
    358885010599838724ULL,
    645993902138460168ULL,
    1220211685215703056ULL,
    2368647251370188832ULL,
    4665518383679160384ULL,
    9259260648297103488ULL,
    18302911464433844481ULL,
    18231136449196065282ULL,
    18087586418720506884ULL,
    17800486357769390088ULL,
    17226286235867156496ULL,
    16077885992062689312ULL,
    13781085504453754944ULL,
    9187484529235886208ULL,
};
u64 bishopAttacks[64] = {
    9241421688590303744ULL,     //a8
    36099303471056128ULL,       //b8
    141012904249856ULL,         //c8
    550848566272ULL,            //d8
    6480472064ULL,              //e8
    1108177604608ULL,           //f8
    283691315142656ULL,         //g8
    72624976668147712ULL,       //h8
    4620710844295151618ULL,     //a7
    9241421688590368773ULL,     //b7
    36099303487963146ULL,       //c7
    141017232965652ULL,         //d7
    1659000848424ULL,           //e7
    283693466779728ULL,         //f7
    72624976676520096ULL,       //g7
    145249953336262720ULL,      //h7
    2310355422147510788ULL,     //a6
    4620710844311799048ULL,     //b6
    9241421692918565393ULL,     //c6
    36100411639206946ULL,       //d6
    424704217196612ULL,         //e6
    72625527495610504ULL,       //f6
    145249955479592976ULL,      //g6
    290499906664153120ULL,      //h6
    1155177711057110024ULL,     //a5
    2310355426409252880ULL,     //b5
    4620711952330133792ULL,     //c5
    9241705379636978241ULL,     //d5
    108724279602332802ULL,      //e5
    145390965166737412ULL,      //f5
    290500455356698632ULL,      //g5
    580999811184992272ULL,      //h5
    577588851267340304ULL,      //a4
    1155178802063085600ULL,     //b4
    2310639079102947392ULL,     //c4
    4693335752243822976ULL,     //d4
    9386671504487645697ULL,     //e4
    326598935265674242ULL,      //f4
    581140276476643332ULL,      //g4
    1161999073681608712ULL,     //h4
    288793334762704928ULL,      //a3
    577868148797087808ULL,      //b3
    1227793891648880768ULL,     //c3
    2455587783297826816ULL,     //d3
    4911175566595588352ULL,     //e3
    9822351133174399489ULL,     //f3
    1197958188344280066ULL,     //g3
    2323857683139004420ULL,     //h3
    144117404414255168ULL,      //a2
    360293502378066048ULL,      //b2
    720587009051099136ULL,      //c2
    1441174018118909952ULL,     //d2
    2882348036221108224ULL,     //e2
    5764696068147249408ULL,     //f2
    11529391036782871041ULL,    //g2
    4611756524879479810ULL,     //h2
    567382630219904ULL,         //a1
    1416240237150208ULL,        //b1
    2833579985862656ULL,        //c1
    5667164249915392ULL,        //d1
    11334324221640704ULL,       //e1
    22667548931719168ULL,       //f1
    45053622886727936ULL,       //g1
    18049651735527937ULL,       //h1


};
